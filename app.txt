import pandas as pd
import numpy as np
import streamlit as st
from hdbcli import dbapi
import hana_ml as hml
from hana_ml.dataframe import ConnectionContext, create_dataframe_from_pandas



st.set_page_config(
    page_title="HANA - DB ANALYSIS",
    page_icon=":üìä:",
    layout="wide",
)


if 'connection' not in st.session_state:
    st.session_state.connection = None
if 'Table' not in st.session_state:
    st.session_state.Table = None



# Define the Streamlit app
def main():

    @st.cache_resource
    def create_connections():
            data = json.load(f)

        df = pd.json_normalize(data)
        db_url = key.iloc(1)[0][0]
        db_port = key.iloc(1)[1][0]
        db_user = key.iloc(1)[2][0]
        db_pwd = key.iloc(1)[3][0]
        st.session_state.connection = dbapi.connect(db_url, db_port, db_user, db_pwd)
        st.success('Connection Created successfully!!')



    page = st.sidebar.selectbox('  ',('Upload Key', 'Tables Operations', 'Table Visualization'))
    

    if page == 'Upload Key':
        with st.expander("Upload HANA DB Key File"):
            uploaded_file = st.file_uploader("", type=["json"])
            st.info('The json file should contain the connection details in the order of `host`, `port`, `user`, `password`, `database`', icon='‚ÑπÔ∏è')

        if uploaded_file is not None:
            create_connections()

    elif page == 'Tables Operations':
        if st.session_state.connection is None:
                st.warning('No connection found. Please upload the connection key first.', icon="‚ö†Ô∏è")
        else:
            cursor = st.session_state.connection.cursor()
            cursor.execute(f"SELECT TABLE_NAME FROM TABLES WHERE SCHEMA_NAME = '{'DBADMIN'}'")
            tables = cursor.fetchall()
            st.session_state.Table = st.selectbox('Select Table', tables[0])
            st.write(st.session_state.Table)
            sql = "SELECT * FROM DBADMIN." + st.session_state.Table + " LIMIT 1000"
            cursor.execute(sql)
            results = cursor.fetchall()
            st.write(results)
            


if __name__ == '__main__':
    main()


